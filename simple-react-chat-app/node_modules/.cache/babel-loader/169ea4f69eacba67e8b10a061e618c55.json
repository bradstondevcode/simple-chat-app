{"ast":null,"code":"import _classCallCheck from\"/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import Button from'@material-ui/core/Button';import TextField from'@material-ui/core/TextField';import IconButton from'@material-ui/core/IconButton';import InputAdornment from'@material-ui/core/InputAdornment';import SendIcon from'@material-ui/icons/Send';import{Row,Container}from'react-bootstrap';import{socket}from'../services/socket';import CurrentUserText from'../components/CurrentUserText';import OtherUserText from'../components/OtherUserText';import ChatNotification from'../components/ChatNotification';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var styles={chatRoomContainer:{marginTop:10},header:{height:\"7vh\",backgroundColor:'rgba(0, 0, 0, 0.25)',alignItems:'center',justifyContent:'center',display:'flex',borderTopLeftRadius:8,borderTopRightRadius:8,flexDirection:'column'},headerText:{fontSize:20},youAppearAsText:{fontSize:14,marginTop:5,display:'flex',flexDirection:'row'},usernameText:{fontWeight:'bold',marginLeft:3,marginRight:3},chatThread:{backgroundColor:'rgba(227, 227, 227, 0.2)',flex:0,display:'flex',flexDirection:'column',height:\"75vh\",overflowY:'auto',width:'45vw',alignSelf:'center',padding:20,paddingBottom:40,border:'1px solid rgba(0, 0, 0, 0.2)',borderBottomLeftRadius:8,borderBottomRightRadius:8,marginBottom:8},messageInputSection:{display:'flex',justifyContent:'flex-start'},messageTextField:{flex:1},messageSubmitButton:{flex:0}};var autoScrollOffset=100;//offset value that allows screen to auto scroll when you are not exactly at bottom of chat window\nvar ChatRoom=/*#__PURE__*/function(_Component){_inherits(ChatRoom,_Component);var _super=_createSuper(ChatRoom);function ChatRoom(props){var _this;_classCallCheck(this,ChatRoom);_this=_super.call(this,props);_this.state={currentUsername:\"User1\",currentUserID:1,message:'',chatRoomData:[],initialLoad:true};//Create Ref for managing \"auto-scroll\"\n_this.messagesEndRef=/*#__PURE__*/React.createRef();return _this;}_createClass(ChatRoom,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;// localStorage.removeItem('userID')\n// localStorage.removeItem('username')\nvar userIDVal=localStorage.getItem('userID');var usernameVal=localStorage.getItem('username');//If user does not have a userid and username saved in local storage, create them for them\nif(!userIDVal){socket.on(\"SetUserData\",function(userData){//When user creation on server is complete, retrieve and save data to local storage\nlocalStorage.setItem('userID',userData.userID);localStorage.setItem('username',userData.username);console.log(userData);_this2.setState({currentUsername:userData.username,currentUserID:userData.userID});//Notify Socket server is not ready to chat\nsocket.emit(\"UserEnteredRoom\",userData);});//Send Socket command to create user info for current user\nsocket.emit(\"CreateUserData\");}else{//If user already has userid and username, notify server to allow them to join chat\nthis.setState({currentUsername:usernameVal,currentUserID:userIDVal});socket.emit(\"UserEnteredRoom\",{userID:userIDVal,username:usernameVal});}//Retrieve game data (from Get Chat data socket call)\nsocket.on(\"RetrieveChatRoomData\",function(chatRoomData){_this2.setState({chatRoomData:chatRoomData},function(){return _this2.shouldScrollToBottom();});});}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){socket.off(\"RetrieveChatRoomData\");socket.off(\"SetUserData\");}},{key:\"setMessage\",value:function setMessage(message){//Set Message being typed in input field\nthis.setState({message:message});}},{key:\"sendMessageData\",value:function sendMessageData(){var _this$state=this.state,message=_this$state.message,currentUsername=_this$state.currentUsername,currentUserID=_this$state.currentUserID;if(message.length>0){//Send chat message to server...\nsocket.emit(\"SendMessage\",{message:message,username:currentUsername,userID:currentUserID,timeStamp:null});//Clear chat message textfield box\nthis.setState({message:''});}}},{key:\"shouldScrollToBottom\",value:function shouldScrollToBottom(){//If user is near the bottom of the chat, automatically navigate them to bottom when new chat message/notification appears\nif(this.messagesEndRef.current.scrollHeight-this.messagesEndRef.current.scrollTop<this.messagesEndRef.current.offsetHeight+autoScrollOffset){this.scrollToBottom();}//Navigate to end of chat when entering chat the first time\nif(this.state.initialLoad){this.scrollToBottom();this.setState({initialLoad:false});}}},{key:\"scrollToBottom\",value:function scrollToBottom(){//Scrolls user to end of chat message window\nthis.messagesEndRef.current.scrollTop=this.messagesEndRef.current.scrollHeight;}},{key:\"render\",value:function render(){var _this3=this;var _this$state2=this.state,chatRoomData=_this$state2.chatRoomData,currentUsername=_this$state2.currentUsername;return/*#__PURE__*/_jsxs(Container,{style:styles.chatRoomContainer,children:[/*#__PURE__*/_jsxs(Container,{style:styles.header,children:[/*#__PURE__*/_jsx(Row,{style:styles.headerText,children:\"Chat Room\"}),/*#__PURE__*/_jsxs(Row,{style:styles.youAppearAsText,children:[\"You appear as\",/*#__PURE__*/_jsxs(\"div\",{style:styles.usernameText,children:[\" \",currentUsername]}),\"in chat\"]})]}),/*#__PURE__*/_jsx(Container,{style:styles.chatThread,ref:this.messagesEndRef,children:chatRoomData.map(function(messageData,index){if(messageData.username==currentUsername){return/*#__PURE__*/_jsx(CurrentUserText,{username:messageData.username,message:messageData.message},index);}else if(messageData.username==''){return/*#__PURE__*/_jsx(ChatNotification,{username:messageData.username,message:messageData.message},index);}else{return/*#__PURE__*/_jsx(OtherUserText,{username:messageData.username,message:messageData.message},index);}})}),/*#__PURE__*/_jsx(Container,{style:styles.messageInputSection,children:/*#__PURE__*/_jsx(TextField,{style:styles.messageTextField,id:\"input-with-icon-adornment\",label:\"Enter Message\",variant:\"outlined\",value:this.state.message,onChange:function onChange(event){return _this3.setMessage(event.target.value);},onKeyPress:function onKeyPress(event){if(event.key==='Enter'){console.log('Enter key pressed');_this3.sendMessageData();}},InputProps:{endAdornment:/*#__PURE__*/_jsx(InputAdornment,{position:\"end\",children:/*#__PURE__*/_jsx(IconButton,{onClick:function onClick(){return _this3.sendMessageData();},children:/*#__PURE__*/_jsx(SendIcon,{})})})}})})]});}}]);return ChatRoom;}(Component);export default ChatRoom;","map":{"version":3,"sources":["/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/src/pages/ChatRoom.js"],"names":["React","Component","Button","TextField","IconButton","InputAdornment","SendIcon","Row","Container","socket","CurrentUserText","OtherUserText","ChatNotification","styles","chatRoomContainer","marginTop","header","height","backgroundColor","alignItems","justifyContent","display","borderTopLeftRadius","borderTopRightRadius","flexDirection","headerText","fontSize","youAppearAsText","usernameText","fontWeight","marginLeft","marginRight","chatThread","flex","overflowY","width","alignSelf","padding","paddingBottom","border","borderBottomLeftRadius","borderBottomRightRadius","marginBottom","messageInputSection","messageTextField","messageSubmitButton","autoScrollOffset","ChatRoom","props","state","currentUsername","currentUserID","message","chatRoomData","initialLoad","messagesEndRef","createRef","userIDVal","localStorage","getItem","usernameVal","on","userData","setItem","userID","username","console","log","setState","emit","shouldScrollToBottom","off","length","timeStamp","current","scrollHeight","scrollTop","offsetHeight","scrollToBottom","map","messageData","index","event","setMessage","target","value","key","sendMessageData","endAdornment"],"mappings":"o1BAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,KAAgC,OAAhC,CACA,MAAOC,CAAAA,MAAP,KAAmB,0BAAnB,CACA,MAAOC,CAAAA,SAAP,KAAsB,6BAAtB,CACA,MAAOC,CAAAA,UAAP,KAAuB,8BAAvB,CACA,MAAOC,CAAAA,cAAP,KAA2B,kCAA3B,CACA,MAAOC,CAAAA,QAAP,KAAqB,yBAArB,CACA,OAASC,GAAT,CAAcC,SAAd,KAA+B,iBAA/B,CAEA,OAAQC,MAAR,KAAqB,oBAArB,CAEA,MAAOC,CAAAA,eAAP,KAA4B,+BAA5B,CACA,MAAOC,CAAAA,aAAP,KAA0B,6BAA1B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,gCAA7B,C,wFAEA,GAAIC,CAAAA,MAAM,CAAG,CACZC,iBAAiB,CAAE,CAClBC,SAAS,CAAE,EADO,CADP,CAIZC,MAAM,CAAC,CACNC,MAAM,CAAE,KADF,CAENC,eAAe,CAAE,qBAFX,CAGNC,UAAU,CAAE,QAHN,CAINC,cAAc,CAAE,QAJV,CAKNC,OAAO,CAAE,MALH,CAMNC,mBAAmB,CAAE,CANf,CAONC,oBAAoB,CAAE,CAPhB,CAQNC,aAAa,CAAE,QART,CAJK,CAcZC,UAAU,CAAE,CACXC,QAAQ,CAAE,EADC,CAdA,CAiBZC,eAAe,CAAE,CAChBD,QAAQ,CAAE,EADM,CAEhBX,SAAS,CAAE,CAFK,CAGhBM,OAAO,CAAE,MAHO,CAIhBG,aAAa,CAAE,KAJC,CAjBL,CAuBZI,YAAY,CAAC,CACZC,UAAU,CAAE,MADA,CAEZC,UAAU,CAAE,CAFA,CAGZC,WAAW,CAAE,CAHD,CAvBD,CA4BZC,UAAU,CAAE,CACXd,eAAe,CAAE,0BADN,CAEXe,IAAI,CAAE,CAFK,CAGXZ,OAAO,CAAE,MAHE,CAIRG,aAAa,CAAE,QAJP,CAKRP,MAAM,CAAE,MALA,CAMRiB,SAAS,CAAE,MANH,CAORC,KAAK,CAAE,MAPC,CAQRC,SAAS,CAAE,QARH,CASRC,OAAO,CAAE,EATD,CAURC,aAAa,CAAE,EAVP,CAWRC,MAAM,CAAE,8BAXA,CAYRC,sBAAsB,CAAE,CAZhB,CAaXC,uBAAuB,CAAE,CAbd,CAcRC,YAAY,CAAE,CAdN,CA5BA,CA4CZC,mBAAmB,CAAE,CACpBtB,OAAO,CAAE,MADW,CAEpBD,cAAc,CAAE,YAFI,CA5CT,CAgDZwB,gBAAgB,CAAE,CACjBX,IAAI,CAAE,CADW,CAhDN,CAmDZY,mBAAmB,CAAE,CACpBZ,IAAI,CAAE,CADc,CAnDT,CAAb,CAyDA,GAAMa,CAAAA,gBAAgB,CAAG,GAAzB,CAA6B;GAEvBC,CAAAA,Q,oGAEL,kBAAYC,KAAZ,CAAmB,0CACf,uBAAMA,KAAN,EACA,MAAKC,KAAL,CAAa,CACZC,eAAe,CAAE,OADL,CAEZC,aAAa,CAAE,CAFH,CAGZC,OAAO,CAAE,EAHG,CAIZC,YAAY,CAAE,EAJF,CAMZC,WAAW,CAAE,IAND,CAAb,CAQA;AACA,MAAKC,cAAL,cAAsBvD,KAAK,CAACwD,SAAN,EAAtB,CAXe,aAYlB,C,sDAED,4BAAmB,iBAElB;AACA;AAEA,GAAIC,CAAAA,SAAS,CAAGC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAhB,CACA,GAAIC,CAAAA,WAAW,CAAGF,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAlB,CAEA;AACA,GAAG,CAACF,SAAJ,CAAc,CAEThD,MAAM,CAACoD,EAAP,CAAU,aAAV,CAAyB,SAAAC,QAAQ,CAAI,CACnC;AACAJ,YAAY,CAACK,OAAb,CAAqB,QAArB,CAA+BD,QAAQ,CAACE,MAAxC,EACAN,YAAY,CAACK,OAAb,CAAqB,UAArB,CAAiCD,QAAQ,CAACG,QAA1C,EACAC,OAAO,CAACC,GAAR,CAAYL,QAAZ,EAEA,MAAI,CAACM,QAAL,CAAc,CAAClB,eAAe,CAAEY,QAAQ,CAACG,QAA3B,CAAqCd,aAAa,CAAEW,QAAQ,CAACE,MAA7D,CAAd,EAEA;AACAvD,MAAM,CAAC4D,IAAP,CAAY,iBAAZ,CAA+BP,QAA/B,EACD,CAVD,EAYA;AACArD,MAAM,CAAC4D,IAAP,CAAY,gBAAZ,EACD,CAhBJ,IAiBQ,CACJ;AACA,KAAKD,QAAL,CAAc,CAAClB,eAAe,CAAEU,WAAlB,CAA+BT,aAAa,CAAEM,SAA9C,CAAd,EACAhD,MAAM,CAAC4D,IAAP,CAAY,iBAAZ,CAA+B,CAACL,MAAM,CAAEP,SAAT,CAAoBQ,QAAQ,CAAEL,WAA9B,CAA/B,EACA,CAED;AACAnD,MAAM,CAACoD,EAAP,CAAU,sBAAV,CAAkC,SAACR,YAAD,CAAkB,CACnD,MAAI,CAACe,QAAL,CAAc,CAACf,YAAY,CAAEA,YAAf,CAAd,CAA4C,iBAAM,CAAA,MAAI,CAACiB,oBAAL,EAAN,EAA5C,EACA,CAFD,EAIH,C,oCAED,+BAAsB,CACrB7D,MAAM,CAAC8D,GAAP,CAAW,sBAAX,EACA9D,MAAM,CAAC8D,GAAP,CAAW,aAAX,EACA,C,0BAED,oBAAWnB,OAAX,CAAmB,CAClB;AACA,KAAKgB,QAAL,CAAc,CAAChB,OAAO,CAAEA,OAAV,CAAd,EACA,C,+BAED,0BAAiB,CAChB,gBAAgD,KAAKH,KAArD,CAAKG,OAAL,aAAKA,OAAL,CAAcF,eAAd,aAAcA,eAAd,CAA+BC,aAA/B,aAA+BA,aAA/B,CAEA,GAAGC,OAAO,CAACoB,MAAR,CAAiB,CAApB,CAAsB,CACrB;AACA/D,MAAM,CAAC4D,IAAP,CAAY,aAAZ,CAA2B,CAACjB,OAAO,CAAEA,OAAV,CAAmBa,QAAQ,CAAEf,eAA7B,CAA8Cc,MAAM,CAAEb,aAAtD,CAAqEsB,SAAS,CAAE,IAAhF,CAA3B,EACA;AACA,KAAKL,QAAL,CAAc,CAAChB,OAAO,CAAE,EAAV,CAAd,EACA,CACD,C,oCAGD,+BAAsB,CACrB;AACA,GAAI,KAAKG,cAAL,CAAoBmB,OAApB,CAA4BC,YAA5B,CAA2C,KAAKpB,cAAL,CAAoBmB,OAApB,CAA4BE,SAAvE,CAAmF,KAAKrB,cAAL,CAAoBmB,OAApB,CAA4BG,YAA5B,CAA2C/B,gBAAlI,CAAmJ,CAClJ,KAAKgC,cAAL,GACA,CAED;AACA,GAAG,KAAK7B,KAAL,CAAWK,WAAd,CAA0B,CACzB,KAAKwB,cAAL,GACA,KAAKV,QAAL,CAAc,CAACd,WAAW,CAAE,KAAd,CAAd,EACA,CACD,C,8BAED,yBAAgB,CACf;AACA,KAAKC,cAAL,CAAoBmB,OAApB,CAA4BE,SAA5B,CAAwC,KAAKrB,cAAL,CAAoBmB,OAApB,CAA4BC,YAApE,CACA,C,sBAGD,iBAAQ,iBAEP,iBAAsC,KAAK1B,KAA3C,CAAKI,YAAL,cAAKA,YAAL,CAAmBH,eAAnB,cAAmBA,eAAnB,CAEA,mBACC,MAAC,SAAD,EAAW,KAAK,CAAIrC,MAAM,CAACC,iBAA3B,wBAEC,MAAC,SAAD,EAAW,KAAK,CAAGD,MAAM,CAACG,MAA1B,wBACC,KAAC,GAAD,EAAK,KAAK,CAAEH,MAAM,CAACY,UAAnB,uBADD,cAEC,MAAC,GAAD,EAAK,KAAK,CAAEZ,MAAM,CAACc,eAAnB,wCAEC,aAAK,KAAK,CAAEd,MAAM,CAACe,YAAnB,eAAmCsB,eAAnC,GAFD,aAFD,GAFD,cAYC,KAAC,SAAD,EAAW,KAAK,CAAErC,MAAM,CAACmB,UAAzB,CAAqC,GAAG,CAAE,KAAKuB,cAA/C,UACEF,YAAY,CAAC0B,GAAb,CAAkB,SAACC,WAAD,CAAcC,KAAd,CAAwB,CAE1C,GAAGD,WAAW,CAACf,QAAZ,EAAwBf,eAA3B,CAA4C,CACxC,mBAAO,KAAC,eAAD,EAA6B,QAAQ,CAAE8B,WAAW,CAACf,QAAnD,CAA6D,OAAO,CAAEe,WAAW,CAAC5B,OAAlF,EAAsB6B,KAAtB,CAAP,CACA,CAFJ,IAEU,IAAID,WAAW,CAACf,QAAZ,EAAwB,EAA5B,CAAgC,CACtC,mBAAO,KAAC,gBAAD,EAA8B,QAAQ,CAAEe,WAAW,CAACf,QAApD,CAA8D,OAAO,CAAEe,WAAW,CAAC5B,OAAnF,EAAuB6B,KAAvB,CAAP,CACA,CAFM,IAEA,CACN,mBAAO,KAAC,aAAD,EAA2B,QAAQ,CAAED,WAAW,CAACf,QAAjD,CAA2D,OAAO,CAAEe,WAAW,CAAC5B,OAAhF,EAAoB6B,KAApB,CAAP,CACA,CAED,CAVH,CADF,EAZD,cA4BI,KAAC,SAAD,EAAW,KAAK,CAAEpE,MAAM,CAAC8B,mBAAzB,uBACE,KAAC,SAAD,EACC,KAAK,CAAG9B,MAAM,CAAC+B,gBADhB,CAEC,EAAE,CAAC,2BAFJ,CAGC,KAAK,CAAC,eAHP,CAIC,OAAO,CAAC,UAJT,CAKC,KAAK,CAAE,KAAKK,KAAL,CAAWG,OALnB,CAMC,QAAQ,CAAE,kBAAC8B,KAAD,QAAW,CAAA,MAAI,CAACC,UAAL,CAAgBD,KAAK,CAACE,MAAN,CAAaC,KAA7B,CAAX,EANX,CAOC,UAAU,CAAG,oBAACH,KAAD,CAAW,CACjB,GAAIA,KAAK,CAACI,GAAN,GAAc,OAAlB,CAA2B,CACzBpB,OAAO,CAACC,GAAR,CAAY,mBAAZ,EACA,MAAI,CAACoB,eAAL,GACD,CACP,CAZF,CAaC,UAAU,CAAE,CACXC,YAAY,cACX,KAAC,cAAD,EAAgB,QAAQ,CAAC,KAAzB,uBACC,KAAC,UAAD,EAAY,OAAO,CAAE,yBAAM,CAAA,MAAI,CAACD,eAAL,EAAN,EAArB,uBACC,KAAC,QAAD,IADD,EADD,EAFU,CAbb,EADF,EA5BJ,GADD,CAyDA,C,sBA7JqBtF,S,EAgKvB,cAAe8C,CAAAA,QAAf","sourcesContent":["import React, {Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport SendIcon from '@material-ui/icons/Send';\nimport { Row, Container } from 'react-bootstrap';\n\nimport {socket} from '../services/socket'\n\nimport CurrentUserText from '../components/CurrentUserText'\nimport OtherUserText from '../components/OtherUserText'\nimport ChatNotification from '../components/ChatNotification'\n\nlet styles = {\n\tchatRoomContainer: {\n\t\tmarginTop: 10,\n\t},\n\theader:{\n\t\theight: \"7vh\",\n\t\tbackgroundColor: 'rgba(0, 0, 0, 0.25)',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t\tdisplay: 'flex',\n\t\tborderTopLeftRadius: 8,\n\t\tborderTopRightRadius: 8,\n\t\tflexDirection: 'column',\n\t},\n\theaderText: {\n\t\tfontSize: 20,\n\t},\n\tyouAppearAsText: {\n\t\tfontSize: 14,\n\t\tmarginTop: 5,\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t},\n\tusernameText:{\n\t\tfontWeight: 'bold',\n\t\tmarginLeft: 3,\n\t\tmarginRight: 3,\n\t},\n\tchatThread: {\n\t\tbackgroundColor: 'rgba(227, 227, 227, 0.2)',\n\t\tflex: 0,\n\t\tdisplay: 'flex',\n    \tflexDirection: 'column',\n    \theight: \"75vh\",\n    \toverflowY: 'auto',\n    \twidth: '45vw',\n    \talignSelf: 'center',\n    \tpadding: 20,\n    \tpaddingBottom: 40,\n    \tborder: '1px solid rgba(0, 0, 0, 0.2)',\n    \tborderBottomLeftRadius: 8,\n\t\tborderBottomRightRadius: 8,\n    \tmarginBottom: 8\n\t},\n\tmessageInputSection: {\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'flex-start',\n\t},\n\tmessageTextField: {\n\t\tflex: 1\n\t},\n\tmessageSubmitButton: {\n\t\tflex: 0\n\t}\n\n}\n\nconst autoScrollOffset = 100 //offset value that allows screen to auto scroll when you are not exactly at bottom of chat window\n\nclass ChatRoom extends Component {\n\n\tconstructor(props) {\n\t    super(props);\n\t    this.state = {\n\t    \tcurrentUsername: \"User1\",\n\t    \tcurrentUserID: 1,\n\t    \tmessage: '',\n\t    \tchatRoomData: [\n\t    \t],\n\t    \tinitialLoad: true,\n\t    };\n\t    //Create Ref for managing \"auto-scroll\"\n\t    this.messagesEndRef = React.createRef()\n\t}\n\n\tcomponentDidMount(){\n\n\t\t// localStorage.removeItem('userID')\n\t\t// localStorage.removeItem('username')\n\n\t\tlet userIDVal = localStorage.getItem('userID')\n\t\tlet usernameVal = localStorage.getItem('username')\n\n\t\t//If user does not have a userid and username saved in local storage, create them for them\n\t\tif(!userIDVal){\n\n\t      socket.on(\"SetUserData\", userData => {\n\t        //When user creation on server is complete, retrieve and save data to local storage\n\t        localStorage.setItem('userID', userData.userID)\n\t        localStorage.setItem('username', userData.username)\n\t        console.log(userData)\n\n\t        this.setState({currentUsername: userData.username, currentUserID: userData.userID})\n\n\t        //Notify Socket server is not ready to chat\n\t        socket.emit(\"UserEnteredRoom\", userData)\n\t      });\n\n\t      //Send Socket command to create user info for current user\n\t      socket.emit(\"CreateUserData\")\n\t    } \n\t    else {\n\t    \t//If user already has userid and username, notify server to allow them to join chat\n\t    \tthis.setState({currentUsername: usernameVal, currentUserID: userIDVal})\n\t    \tsocket.emit(\"UserEnteredRoom\", {userID: userIDVal, username: usernameVal})\n\t    }\n\n\t    //Retrieve game data (from Get Chat data socket call)\n\t    socket.on(\"RetrieveChatRoomData\", (chatRoomData) => {\n\t    \tthis.setState({chatRoomData: chatRoomData}, () => this.shouldScrollToBottom())\n\t    })\n\n\t}\n\n\tcomponentWillUnmount(){\n\t\tsocket.off(\"RetrieveChatRoomData\")\n\t\tsocket.off(\"SetUserData\")\n\t}\n\n\tsetMessage(message){\n\t\t//Set Message being typed in input field\n\t\tthis.setState({message: message})\n\t}\n\n\tsendMessageData(){\n\t\tvar {message, currentUsername, currentUserID} = this.state\n\n\t\tif(message.length > 0){\n\t\t\t//Send chat message to server...\n\t\t\tsocket.emit(\"SendMessage\", {message: message, username: currentUsername, userID: currentUserID, timeStamp: null})\n\t\t\t//Clear chat message textfield box\n\t\t\tthis.setState({message: ''})\n\t\t}\n\t}\n\n\n\tshouldScrollToBottom(){\n\t\t//If user is near the bottom of the chat, automatically navigate them to bottom when new chat message/notification appears\n\t\tif (this.messagesEndRef.current.scrollHeight - this.messagesEndRef.current.scrollTop < this.messagesEndRef.current.offsetHeight + autoScrollOffset){\n\t\t\tthis.scrollToBottom()\n\t\t}\n\n\t\t//Navigate to end of chat when entering chat the first time\n\t\tif(this.state.initialLoad){\n\t\t\tthis.scrollToBottom()\n\t\t\tthis.setState({initialLoad: false})\n\t\t}\n\t}\n\n\tscrollToBottom(){\n\t\t//Scrolls user to end of chat message window\n\t\tthis.messagesEndRef.current.scrollTop = this.messagesEndRef.current.scrollHeight\n\t}\n\n\n\trender(){\n\n\t\tlet {chatRoomData, currentUsername} = this.state\n\n\t\treturn (\n\t\t\t<Container style = {styles.chatRoomContainer}>\n\n\t\t\t\t<Container style ={styles.header}>\n\t\t\t\t\t<Row style={styles.headerText}>Chat Room</Row>\n\t\t\t\t\t<Row style={styles.youAppearAsText}>\n\t\t\t\t\t\tYou appear as \n\t\t\t\t\t\t<div style={styles.usernameText}> {currentUsername}</div>\n\t\t\t\t\t\tin chat\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\t\t\t\t\n\n\t\t\t\t<Container style={styles.chatThread} ref={this.messagesEndRef}>\n\t\t\t\t\t{chatRoomData.map( (messageData, index) => {\n\n\t\t\t\t\t\tif(messageData.username == currentUsername) {\n\t\t\t    \t\t\treturn <CurrentUserText key={index} username={messageData.username} message={messageData.message}/>\n\t\t\t    \t\t} else if (messageData.username == '') {\n\t\t\t    \t\t\treturn <ChatNotification key={index} username={messageData.username} message={messageData.message}/>\n\t\t\t    \t\t} else {\n\t\t\t    \t\t\treturn <OtherUserText key={index} username={messageData.username} message={messageData.message}/>\n\t\t\t    \t\t}\n\t\t    \t\t\t\n\t\t    \t\t})}\n\n\t  \t\t\t\t\n\t    \t\t</Container>\n\n\t    \t\t<Container style={styles.messageInputSection}>\n\t\t\t    \t\t<TextField \n\t\t\t    \t\t\tstyle= {styles.messageTextField}\n\t\t\t    \t\t\tid=\"input-with-icon-adornment\" \n\t\t\t    \t\t\tlabel=\"Enter Message\" \n\t\t\t    \t\t\tvariant=\"outlined\"  \n\t\t\t    \t\t\tvalue={this.state.message} \n\t\t\t    \t\t\tonChange={(event) => this.setMessage(event.target.value)}\n\t\t\t    \t\t\tonKeyPress= {(event) => {\n\t\t\t\t\t            if (event.key === 'Enter') {\n\t\t\t\t\t              console.log('Enter key pressed');\n\t\t\t\t\t              this.sendMessageData()\n\t\t\t\t\t            }\n\t\t\t\t\t\t    }}\n\t\t\t\t\t\t    InputProps={{\n\t\t\t\t\t\t    \tendAdornment:(\n\t\t\t\t\t\t\t    \t<InputAdornment position=\"end\">\n\t\t\t\t\t\t\t    \t\t<IconButton onClick={() => this.sendMessageData()}>\n\t\t\t\t\t\t\t    \t\t\t<SendIcon/>\n\t\t\t\t\t\t\t    \t\t</IconButton>\n\t\t\t\t\t\t\t    \t</InputAdornment>\n\t\t\t\t\t\t\t    )\n\t\t\t\t\t\t    }}\n\t\t\t    \t\t/>\n\t\t\t\t</Container>\n\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nexport default ChatRoom;"]},"metadata":{},"sourceType":"module"}