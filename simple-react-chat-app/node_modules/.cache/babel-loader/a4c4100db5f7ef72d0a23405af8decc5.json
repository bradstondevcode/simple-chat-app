{"ast":null,"code":"var _jsxFileName = \"/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/src/pages/ChatRoom.js\";\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { Row, Container } from 'react-bootstrap';\nimport { socket } from '../services/socket';\nimport CurrentUserText from '../components/CurrentUserText';\nimport OtherUserText from '../components/OtherUserText';\nimport ChatNotification from '../components/ChatNotification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet styles = {\n  headerText: {\n    height: \"3vh\"\n  },\n  chatThread: {\n    backgroundColor: 'rgba(227, 227, 227, 0.2)',\n    flex: 0,\n    display: 'flex',\n    flexDirection: 'column',\n    height: \"75vh\",\n    overflowY: 'auto',\n    width: '35vw',\n    alignSelf: 'center',\n    padding: 10\n  },\n  chatMessageInput: {\n    height: \"3vh\"\n  }\n};\n\nclass ChatRoom extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUsername: \"User1\",\n      currentUserID: 1,\n      message: '',\n      chatRoomData: []\n    };\n    this.messagesEndRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    // localStorage.removeItem('userID')\n    // localStorage.removeItem('username')\n    let userIDVal = localStorage.getItem('userID');\n    let usernameVal = localStorage.getItem('username');\n\n    if (!userIDVal) {\n      socket.on(\"SetUserData\", userData => {\n        localStorage.setItem('userID', userData.userID);\n        localStorage.setItem('username', userData.username);\n        console.log(userData);\n        this.setState({\n          currentUsername: userData.username,\n          currentUserID: userData.userID\n        });\n        socket.emit(\"UserEnteredRoom\", userData);\n      });\n      socket.emit(\"CreateUserData\");\n    } else {\n      console.log(usernameVal);\n      this.setState({\n        currentUsername: usernameVal,\n        currentUserID: userIDVal\n      });\n      socket.emit(\"UserEnteredRoom\", {\n        userID: userIDVal,\n        username: usernameVal\n      });\n    } //Retrieve game data (from GetGameData socket call)\n\n\n    socket.on(\"RetrieveChatRoomData\", chatRoomData => {\n      this.setState({\n        chatRoomData: chatRoomData\n      });\n    });\n    this.scrollToBottom();\n    console.log(this.messagesEndRef.current);\n    this.messagesEndRef.current.scroll({\n      top: 1000,\n      behavior: 'smooth'\n    });\n    console.log(\"We Here\");\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  componentWillUnmount() {\n    // socket.emit(\"disconnect\", {username: this.state.currentUsername, userID: this.state.currentUserID})\n    socket.off(\"RetrieveChatRoomData\");\n    socket.off(\"SetUserData\");\n  }\n\n  setMessage(message) {\n    this.setState({\n      message: message\n    });\n  }\n\n  sendMessageData() {\n    var {\n      message,\n      currentUsername,\n      currentUserID\n    } = this.state;\n\n    if (message.length > 0) {\n      socket.emit(\"SendMessage\", {\n        message: message,\n        username: currentUsername,\n        userID: currentUserID,\n        timeStamp: null\n      });\n      this.setState({\n        message: ''\n      });\n      this.scrollToBottom();\n    }\n  }\n\n  scrollToBottom() {\n    this.messagesEndRef.current.scrollBottom = 1000;\n  }\n\n  render() {\n    let {\n      chatRoomData,\n      currentUsername\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: styles.headerText,\n        children: \"Chat Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        style: styles.chatThread,\n        ref: this.messagesEndRef,\n        children: chatRoomData.map((messageData, index) => {\n          if (messageData.username == currentUsername) {\n            return /*#__PURE__*/_jsxDEV(CurrentUserText, {\n              username: messageData.username,\n              message: messageData.message\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 18\n            }, this);\n          } else if (messageData.username == '') {\n            return /*#__PURE__*/_jsxDEV(ChatNotification, {\n              username: messageData.username,\n              message: messageData.message\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 18\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(OtherUserText, {\n              username: messageData.username,\n              message: messageData.message\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 18\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            id: \"outlined-basic\",\n            label: \"Enter Message\",\n            variant: \"outlined\",\n            value: this.state.message,\n            onChange: event => this.setMessage(event.target.value),\n            onKeyPress: e => {\n              if (e.key === 'Enter') {\n                console.log('Enter key pressed');\n                this.sendMessageData(); // write your functionality here\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 10\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          style: styles.chatMessageInput,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => this.sendMessageData(),\n            children: \"Send Message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 10\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default ChatRoom;","map":{"version":3,"sources":["/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/src/pages/ChatRoom.js"],"names":["React","Component","Button","TextField","Row","Container","socket","CurrentUserText","OtherUserText","ChatNotification","styles","headerText","height","chatThread","backgroundColor","flex","display","flexDirection","overflowY","width","alignSelf","padding","chatMessageInput","ChatRoom","constructor","props","state","currentUsername","currentUserID","message","chatRoomData","messagesEndRef","createRef","componentDidMount","userIDVal","localStorage","getItem","usernameVal","on","userData","setItem","userID","username","console","log","setState","emit","scrollToBottom","current","scroll","top","behavior","componentDidUpdate","componentWillUnmount","off","setMessage","sendMessageData","length","timeStamp","scrollBottom","render","map","messageData","index","event","target","value","e","key"],"mappings":"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","sourcesContent":["import React, {Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { Row, Container } from 'react-bootstrap';\n\nimport {socket} from '../services/socket'\n\nimport CurrentUserText from '../components/CurrentUserText'\nimport OtherUserText from '../components/OtherUserText'\nimport ChatNotification from '../components/ChatNotification'\n\nlet styles = {\n\theaderText: {\n\t\theight: \"3vh\",\n\t},\n\tchatThread: {\n\t\tbackgroundColor: 'rgba(227, 227, 227, 0.2)',\n\t\tflex: 0,\n\t\tdisplay: 'flex',\n    \tflexDirection: 'column',\n    \theight: \"75vh\",\n    \toverflowY: 'auto',\n    \twidth: '35vw',\n    \talignSelf: 'center',\n    \tpadding: 10,\n\t},\n\tchatMessageInput: {\n\t\theight: \"3vh\",\n\t}\n\n}\n\n\n\nclass ChatRoom extends Component {\n\n\n\n\tconstructor(props) {\n\t    super(props);\n\t    this.state = {\n\t    \tcurrentUsername: \"User1\",\n\t    \tcurrentUserID: 1,\n\t    \tmessage: '',\n\t    \tchatRoomData: [\n\t    \t]\n\t    };\n\n\t    this.messagesEndRef = React.createRef()\n\t}\n\n\tcomponentDidMount(){\n\n\t\t// localStorage.removeItem('userID')\n\t\t// localStorage.removeItem('username')\n\n\t\tlet userIDVal = localStorage.getItem('userID')\n\t\tlet usernameVal = localStorage.getItem('username')\n\n\t\tif(!userIDVal){\n\n\t      socket.on(\"SetUserData\", userData => {\n\t        \n\t        localStorage.setItem('userID', userData.userID)\n\t        localStorage.setItem('username', userData.username)\n\t        console.log(userData)\n\n\t        this.setState({currentUsername: userData.username, currentUserID: userData.userID})\n\n\t        socket.emit(\"UserEnteredRoom\", userData)\n\t      });\n\n\t      socket.emit(\"CreateUserData\")\n\t    } \n\t    else {\n\t    \tconsole.log(usernameVal)\n\t    \tthis.setState({currentUsername: usernameVal, currentUserID: userIDVal})\n\t    \tsocket.emit(\"UserEnteredRoom\", {userID: userIDVal, username: usernameVal})\n\t    }\n\n\t    //Retrieve game data (from GetGameData socket call)\n\t    socket.on(\"RetrieveChatRoomData\", (chatRoomData) => {\n\t    \tthis.setState({chatRoomData: chatRoomData})\n\t    })\n\n\t    this.scrollToBottom()\n\n\t    console.log(this.messagesEndRef.current)\n\n\t    this.messagesEndRef.current.scroll({ top: 1000, behavior: 'smooth' })\n\n\t    console.log(\"We Here\")\n\n\t}\n\n\tcomponentDidUpdate () {\n\t\tthis.scrollToBottom()\n\t}\n\n\tcomponentWillUnmount(){\n\t\t// socket.emit(\"disconnect\", {username: this.state.currentUsername, userID: this.state.currentUserID})\n\t\tsocket.off(\"RetrieveChatRoomData\")\n\t\tsocket.off(\"SetUserData\")\n\t}\n\n\tsetMessage(message){\n\t\tthis.setState({message: message})\n\t}\n\n\tsendMessageData(){\n\t\tvar {message, currentUsername, currentUserID} = this.state\n\n\t\tif(message.length > 0){\n\n\t\t\tsocket.emit(\"SendMessage\", {message: message, username: currentUsername, userID: currentUserID, timeStamp: null})\n\n\t\t\tthis.setState({message: ''})\n\t\t\tthis.scrollToBottom()\n\t\t}\n\t}\n\n\tscrollToBottom(){\n\t  this.messagesEndRef.current.scrollBottom = 1000\n\t}\n\n\n\trender(){\n\n\t\tlet {chatRoomData, currentUsername} = this.state\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<h1 style={styles.headerText}>Chat Room</h1>\n\n\t\t\t\t<Container style={styles.chatThread} ref={this.messagesEndRef}>\n\t\t\t\t\t{chatRoomData.map( (messageData, index) => {\n\t\t\t\t\t\tif(messageData.username == currentUsername) {\n\t\t\t    \t\t\treturn <CurrentUserText key={index} username={messageData.username} message={messageData.message}/>\n\t\t\t    \t\t} else if (messageData.username == '') {\n\t\t\t    \t\t\treturn <ChatNotification key={index} username={messageData.username} message={messageData.message}/>\n\t\t\t    \t\t} else {\n\t\t\t    \t\t\treturn <OtherUserText key={index} username={messageData.username} message={messageData.message}/>\n\t\t\t    \t\t}\n\t\t\t\t\t}\n\t\t    \t\t\t\n\t\t    \t\t)}\n\n\t  \t\t\t\t\n\t    \t\t</Container>\n\n\t    \t\t<Container>\n\t\t    \t\t<Row>\n\t\t\t    \t\t<TextField \n\t\t\t    \t\t\tid=\"outlined-basic\" \n\t\t\t    \t\t\tlabel=\"Enter Message\" \n\t\t\t    \t\t\tvariant=\"outlined\"  \n\t\t\t    \t\t\tvalue={this.state.message} \n\t\t\t    \t\t\tonChange={(event) => this.setMessage(event.target.value)}\n\t\t\t    \t\t\tonKeyPress= {(e) => {\n\t\t\t\t\t            if (e.key === 'Enter') {\n\t\t\t\t\t              console.log('Enter key pressed');\n\t\t\t\t\t              this.sendMessageData()\n\t\t\t\t\t              // write your functionality here\n\t\t\t\t\t            }\n\t\t\t\t\t\t    }}\n\t\t\t    \t\t/>\n\t\t    \t\t</Row>\n\t\t    \t\t<Row style={styles.chatMessageInput}>\n\t\t\t    \t\t<Button variant=\"contained\" color=\"primary\" onClick={() => this.sendMessageData()}>\n\t\t\t\t\t \t\t Send Message\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nexport default ChatRoom;"]},"metadata":{},"sourceType":"module"}