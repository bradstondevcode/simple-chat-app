[{"/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/src/index.js":"1","/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/src/App.js":"2","/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/src/reportWebVitals.js":"3","/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/src/pages/ChatRoom.js":"4","/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/src/services/socket.js":"5","/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/src/components/CurrentUserText.js":"6","/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/src/components/OtherUserText.js":"7","/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/src/components/ChatNotification.js":"8","/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/src/pages/ClearChat.js":"9"},{"size":500,"mtime":1619451676522,"results":"10","hashOfConfig":"11"},{"size":605,"mtime":1619547040696,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1619451676524,"results":"13","hashOfConfig":"11"},{"size":6587,"mtime":1619664814991,"results":"14","hashOfConfig":"11"},{"size":226,"mtime":1619753611470,"results":"15","hashOfConfig":"11"},{"size":1158,"mtime":1619547717719,"results":"16","hashOfConfig":"11"},{"size":1282,"mtime":1619547726837,"results":"17","hashOfConfig":"11"},{"size":1030,"mtime":1619547737988,"results":"18","hashOfConfig":"11"},{"size":1042,"mtime":1619547362775,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"12vziy6",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"22"},"/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/src/index.js",[],["45","46"],"/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/src/App.js",["47"],"import logo from './logo.svg';\nimport './App.css';\n\nimport ChatRoom from './pages/ChatRoom'\nimport ClearChat from './pages/ClearChat'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\" style={{justifyContent:'center', display: 'flex'}}>\n\n        <Switch>\n\n          <Route exact path=\"/\">\n            <ChatRoom/>\n          </Route>\n\n          <Route exact path=\"/clearChat\">\n            <ClearChat/>\n          </Route>\n\n\n        </Switch>\n        \n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/src/reportWebVitals.js",[],"/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/src/pages/ChatRoom.js",["48","49","50"],"import React, {Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport SendIcon from '@material-ui/icons/Send';\nimport { Row, Container } from 'react-bootstrap';\n\nimport CurrentUserText from '../components/CurrentUserText'\nimport OtherUserText from '../components/OtherUserText'\nimport ChatNotification from '../components/ChatNotification'\n\nimport {socket} from '../services/socket'\n\nlet styles = {\n\tchatRoomContainer: {\n\t\tmarginTop: 10,\n\t},\n\theader:{\n\t\theight: \"7vh\",\n\t\tbackgroundColor: 'rgba(0, 0, 0, 0.25)',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t\tdisplay: 'flex',\n\t\tborderTopLeftRadius: 8,\n\t\tborderTopRightRadius: 8,\n\t\tflexDirection: 'column',\n\t},\n\theaderText: {\n\t\tfontSize: 20,\n\t},\n\tyouAppearAsText: {\n\t\tfontSize: 14,\n\t\tmarginTop: 5,\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t},\n\tusernameText:{\n\t\tfontWeight: 'bold',\n\t\tmarginLeft: 3,\n\t\tmarginRight: 3,\n\t},\n\tchatThread: {\n\t\tbackgroundColor: 'rgba(227, 227, 227, 0.2)',\n\t\tflex: 0,\n\t\tdisplay: 'flex',\n    \tflexDirection: 'column',\n    \theight: \"75vh\",\n    \toverflowY: 'auto',\n    \twidth: '45vw',\n    \talignSelf: 'center',\n    \tpadding: 20,\n    \tpaddingBottom: 40,\n    \tborder: '1px solid rgba(0, 0, 0, 0.2)',\n    \tborderBottomLeftRadius: 8,\n\t\tborderBottomRightRadius: 8,\n    \tmarginBottom: 8\n\t},\n\tmessageInputSection: {\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'flex-start',\n\t},\n\tmessageTextField: {\n\t\tflex: 1\n\t},\n\tmessageSubmitButton: {\n\t\tflex: 0\n\t}\n\n}\n\nconst autoScrollOffset = 100 //offset value that allows screen to auto scroll when you are not exactly at bottom of chat window\n\nclass ChatRoom extends Component {\n\n\tconstructor(props) {\n\t    super(props);\n\t    this.state = {\n\t    \tcurrentUsername: \"User1\",\n\t    \tcurrentUserID: 1,\n\t    \tmessage: '',\n\t    \tchatRoomData: [\n\t    \t],\n\t    \tinitialLoad: true,\n\t    };\n\t    //Create Ref for managing \"auto-scroll\"\n\t    this.messagesEndRef = React.createRef()\n\t}\n\n\tcomponentDidMount(){\n\n\t\t// localStorage.removeItem('userID')\n\t\t// localStorage.removeItem('username')\n\n\t\tlet userIDVal = localStorage.getItem('userID')\n\t\tlet usernameVal = localStorage.getItem('username')\n\n\t\t//If user does not have a userid and username saved in local storage, create them for them\n\t\tif(!userIDVal){\n\n\t      socket.on(\"SetUserData\", userData => {\n\t        //When user creation on server is complete, retrieve and save data to local storage\n\t        localStorage.setItem('userID', userData.userID)\n\t        localStorage.setItem('username', userData.username)\n\t        console.log(userData)\n\n\t        this.setState({currentUsername: userData.username, currentUserID: userData.userID})\n\n\t        //Notify Socket server is not ready to chat\n\t        socket.emit(\"UserEnteredRoom\", userData)\n\t      });\n\n\t      //Send Socket command to create user info for current user\n\t      socket.emit(\"CreateUserData\")\n\t    } \n\t    else {\n\t    \t//If user already has userid and username, notify server to allow them to join chat\n\t    \tthis.setState({currentUsername: usernameVal, currentUserID: userIDVal})\n\t    \tsocket.emit(\"UserEnteredRoom\", {userID: userIDVal, username: usernameVal})\n\t    }\n\n\t    //Retrieve game data (from Get Chat data socket call)\n\t    socket.on(\"RetrieveChatRoomData\", (chatRoomData) => {\n\t    \tthis.setState({chatRoomData: chatRoomData}, () => this.shouldScrollToBottom())\n\t    })\n\n\t}\n\n\tcomponentWillUnmount(){\n\t\tsocket.off(\"RetrieveChatRoomData\")\n\t\tsocket.off(\"SetUserData\")\n\t}\n\n\tsetMessage(message){\n\t\t//Set Message being typed in input field\n\t\tthis.setState({message: message})\n\t}\n\n\tsendMessageData(){\n\t\tvar {message, currentUsername, currentUserID} = this.state\n\n\t\tif(message.length > 0){\n\t\t\t//Send chat message to server...\n\t\t\tsocket.emit(\"SendMessage\", {message: message, username: currentUsername, userID: currentUserID, timeStamp: null})\n\t\t\t//Clear chat message textfield box\n\t\t\tthis.setState({message: ''})\n\t\t}\n\t}\n\n\n\tshouldScrollToBottom(){\n\t\t//If user is near the bottom of the chat, automatically navigate them to bottom when new chat message/notification appears\n\t\tif (this.messagesEndRef.current.scrollHeight - this.messagesEndRef.current.scrollTop < this.messagesEndRef.current.offsetHeight + autoScrollOffset){\n\t\t\tthis.scrollToBottom()\n\t\t}\n\n\t\t//Navigate to end of chat when entering chat the first time\n\t\tif(this.state.initialLoad){\n\t\t\tthis.scrollToBottom()\n\t\t\tthis.setState({initialLoad: false})\n\t\t}\n\t}\n\n\tscrollToBottom(){\n\t\t//Scrolls user to end of chat message window\n\t\tthis.messagesEndRef.current.scrollTop = this.messagesEndRef.current.scrollHeight\n\t}\n\n\n\trender(){\n\n\t\tlet {chatRoomData, currentUsername} = this.state\n\n\t\treturn (\n\t\t\t<Container style = {styles.chatRoomContainer}>\n\n\t\t\t\t<Container style ={styles.header}>\n\t\t\t\t\t<Row style={styles.headerText}>Chat Room</Row>\n\t\t\t\t\t<Row style={styles.youAppearAsText}>\n\t\t\t\t\t\tYou appear as \n\t\t\t\t\t\t<div style={styles.usernameText}> {currentUsername}</div>\n\t\t\t\t\t\tin chat\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\t\t\t\t\n\n\t\t\t\t<Container style={styles.chatThread} ref={this.messagesEndRef}>\n\t\t\t\t\t{chatRoomData.map( (messageData, index) => {\n\n\t\t\t\t\t\tif(messageData.username == currentUsername) {\n\t\t\t    \t\t\treturn <CurrentUserText key={index} username={messageData.username} message={messageData.message}/>\n\t\t\t    \t\t} else if (messageData.username == '') {\n\t\t\t    \t\t\treturn <ChatNotification key={index} username={messageData.username} message={messageData.message}/>\n\t\t\t    \t\t} else {\n\t\t\t    \t\t\treturn <OtherUserText key={index} username={messageData.username} message={messageData.message}/>\n\t\t\t    \t\t}\n\t\t    \t\t\t\n\t\t    \t\t})}\n\n\t  \t\t\t\t\n\t    \t\t</Container>\n\n\t    \t\t<Container style={styles.messageInputSection}>\n\t\t\t    \t\t<TextField \n\t\t\t    \t\t\tstyle= {styles.messageTextField}\n\t\t\t    \t\t\tid=\"input-with-icon-adornment\" \n\t\t\t    \t\t\tlabel=\"Enter Message\" \n\t\t\t    \t\t\tvariant=\"outlined\"  \n\t\t\t    \t\t\tvalue={this.state.message} \n\t\t\t    \t\t\tonChange={(event) => this.setMessage(event.target.value)}\n\t\t\t    \t\t\tonKeyPress= {(event) => {\n\t\t\t\t\t            if (event.key === 'Enter') {\n\t\t\t\t\t              console.log('Enter key pressed');\n\t\t\t\t\t              this.sendMessageData()\n\t\t\t\t\t            }\n\t\t\t\t\t\t    }}\n\t\t\t\t\t\t    InputProps={{\n\t\t\t\t\t\t    \tendAdornment:(\n\t\t\t\t\t\t\t    \t<InputAdornment position=\"end\">\n\t\t\t\t\t\t\t    \t\t<IconButton onClick={() => this.sendMessageData()}>\n\t\t\t\t\t\t\t    \t\t\t<SendIcon/>\n\t\t\t\t\t\t\t    \t\t</IconButton>\n\t\t\t\t\t\t\t    \t</InputAdornment>\n\t\t\t\t\t\t\t    )\n\t\t\t\t\t\t    }}\n\t\t\t    \t\t/>\n\t\t\t\t</Container>\n\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nexport default ChatRoom;","/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/src/services/socket.js",[],"/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/src/components/CurrentUserText.js",["51","52","53"],"import React, {Component } from 'react';\nimport { Row, Container } from 'react-bootstrap';\n\nlet styles = {\n  currentUserTextContainer: {\n  \tmarginBottom: 20,\n  \tflex: 0,\n  \tjustifyContent: 'flex-end',\n  \tdisplay: 'flex',\n  \tmarginLeft: '25%',\n  },\n  textBubble: {\n  \tpadding: 10,\n  \tbackgroundColor: '#0071BC',\n  \tjustifyContent: 'flex-start',\n  \tflex: 0,\n  \tdisplay: 'flex',\n  \tborderRadius: 8,\n  \ttextAlign: 'right',\n  \tcolor:'white'\n  },\n  usernameText:{\n  \tfontSize:9\n  }\n}\n\n class CurrentUserText extends Component {\n\tconstructor(props) {\n\t    super(props);\n\t    this.state = {\n\t    \tusername: '',\n\t    \tmessage: '',\n\t    };\n\n\t}\n\n\tcomponentDidMount(){\n\t\tvar {message, username, timestamp} = this.props\n\n\t\tif(username){\n\t\t\tthis.setState({username: username})\n\t\t}\n\n\t\tif(message){\n\t\t\tthis.setState({message: message})\n\t\t}\n\n\t}\n\n\tcomponentWillUnmount(){\n\t}\n\n\t\n\trender(){\n\t\tconst {username, message} = this.state\n\n\t\tlet {chatRoomData} = this.state\n\n\t\treturn (\n\t\t\t<Row style={styles.currentUserTextContainer}>\n\t\t\t\t<Container>\n\t\t\t\t\t<Row style={styles.textBubble}>\n\t\t\t\t\t\t{message}\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\t\t\t</Row>\n\t\t);\n\t}\n}\n\nexport default CurrentUserText;","/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/src/components/OtherUserText.js",["54","55"],"import React, {Component } from 'react';\nimport { Row, Container } from 'react-bootstrap';\n\nlet styles = {\n  userTextContainer: {\n  \tmarginBottom: 20,\n  \tmarginRight: '25%',\n  \tflex: 0,\n  \tjustifyContent: 'flex-start',\n  \tdisplay: 'flex',\n  },\n  textBubble: {\n  \tpadding: 10,\n  \tbackgroundColor: '#E6E6E6',\n  \tjustifyContent: 'flex-start',\n  \tflex: 0,\n  \tdisplay: 'flex',\n  \ttextAlign: 'left',\n  \tborderRadius: 8,\n  \tcolor:'black'\n  },\n  usernameText:{\n  \tfontSize:12,\n  \tdisplay: 'flex',\n  \tjustifyContent: 'flex-start',\n  \tmarginBottom: 3,\n  }\n}\n\nclass OtherUserText extends Component {\n\tconstructor(props) {\n\t    super(props);\n\t    this.state = {\n\t    \tusername: '',\n\t    \tmessage: '',\n\t    };\n\n\t}\n\n\tcomponentDidMount(){\n\t\tvar {message, username, timestamp} = this.props\n\n\t\tif(username){\n\t\t\tthis.setState({username: username})\n\t\t}\n\n\t\tif(message){\n\t\t\tthis.setState({message: message})\n\t\t}\n\n\t}\n\n\tcomponentWillUnmount(){\n\t}\n\n\trender(){\n\t\tconst {username, message} = this.state\n\n\t\tlet {chatRoomData} = this.state\n\n\t\treturn (\n\t\t\t<Row style={styles.userTextContainer}>\n\t\t\t\t<Container>\n\t\t\t\t\t<Row style={styles.usernameText}>\n\t\t\t\t\t\t{username}\n\t\t\t\t\t</Row>\n\t\t\t\t\t<Row style={styles.textBubble}>\n\t\t\t\t\t\t{message}\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\t\t\t</Row>\n\t\t);\n\t}\n}\n\nexport default OtherUserText;","/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/src/components/ChatNotification.js",["56","57"],"import React, {Component } from 'react';\nimport { Row, Container } from 'react-bootstrap';\n\nlet styles = {\n  currentUserTextContainer: {\n  \tmarginBottom: 10,\n  \tflex: 0,\n  \tjustifyContent: 'center',\n  \tdisplay: 'flex',\n  },\n  textBubble: {\n  \tpadding: 10,\n  \tjustifyContent: 'center',\n  \tflex: 0,\n  \tdisplay: 'flex',\n  \tborderRadius: 8,\n  \tfontSize: 14,\n  \tcolor: 'rgba(0, 0, 0, 0.50)'\n  },\n  usernameText:{\n  \tfontSize: 9\n  }\n}\n\nclass ChatNotification extends Component {\n\tconstructor(props) {\n\t    super(props);\n\t    this.state = {\n\t    \tusername: '',\n\t    \tmessage: '',\n\t    };\n\n\t}\n\n\tcomponentDidMount(){\n\t\tvar {message, timestamp} = this.props\n\n\t\tif(message){\n\t\t\tthis.setState({message: message})\n\t\t}\n\n\t}\n\n\tcomponentWillUnmount(){\n\t}\n\n\t\n\trender(){\n\t\tconst {message} = this.state\n\n\t\tlet {chatRoomData} = this.state\n\n\t\treturn (\n\t\t\t<Row style={styles.currentUserTextContainer}>\n\t\t\t\t<Container>\n\t\t\t\t\t<Row style={styles.textBubble}>\n\t\t\t\t\t\t{message}\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\t\t\t</Row>\n\t\t);\n\t}\n}\n\nexport default ChatNotification;","/Users/bradston/Documents/Dev_Advocate/Blog Posts/Create Simple Realtime Chatroom with React, Node and Socket.io/simple-react-chat-app/src/pages/ClearChat.js",["58","59","60","61"],"import React, {Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { Row, Container } from 'react-bootstrap';\n\nimport {socket} from '../services/socket'\n\n\nconst autoScrollOffset = 100 //offset value that allows screen to auto scroll when you are not exactly at bottom of chat window\n\nclass ChatRoom extends Component {\n\n\tconstructor(props) {\n\t    super(props);\n\t    this.state = {\n\t    \tcurrentUsername: \"User1\",\n\t    \tcurrentUserID: 1,\n\t    \tmessage: '',\n\t    \tchatRoomData: [\n\t    \t],\n\t    \tinitialLoad: true,\n\t    };\n\t    //Create Ref for managing \"auto-scroll\"\n\t    this.messagesEndRef = React.createRef()\n\t}\n\n\tcomponentDidMount(){\n\n\t}\n\n\tclearChatData(){\n\t\tsocket.emit(\"ClearChat\")\n\t\tconsole.log(\"Clearing Chat\")\n\t}\n\n\trender(){\n\n\t\tlet {chatRoomData, currentUsername} = this.state\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<div>Clear Chat</div>\n\n\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={ () => this.clearChatData()}>\n\t\t\t \t\t Clear Chat Data\n\t\t\t\t</Button>\n\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nexport default ChatRoom;",{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":1,"column":8,"nodeType":"68","messageId":"69","endLine":1,"endColumn":12},{"ruleId":"66","severity":1,"message":"70","line":2,"column":8,"nodeType":"68","messageId":"69","endLine":2,"endColumn":14},{"ruleId":"71","severity":1,"message":"72","line":190,"column":31,"nodeType":"73","messageId":"74","endLine":190,"endColumn":33},{"ruleId":"71","severity":1,"message":"72","line":192,"column":42,"nodeType":"73","messageId":"74","endLine":192,"endColumn":44},{"ruleId":"66","severity":1,"message":"75","line":38,"column":27,"nodeType":"68","messageId":"69","endLine":38,"endColumn":36},{"ruleId":"66","severity":1,"message":"76","line":55,"column":10,"nodeType":"68","messageId":"69","endLine":55,"endColumn":18},{"ruleId":"66","severity":1,"message":"77","line":57,"column":8,"nodeType":"68","messageId":"69","endLine":57,"endColumn":20},{"ruleId":"66","severity":1,"message":"75","line":41,"column":27,"nodeType":"68","messageId":"69","endLine":41,"endColumn":36},{"ruleId":"66","severity":1,"message":"77","line":59,"column":8,"nodeType":"68","messageId":"69","endLine":59,"endColumn":20},{"ruleId":"66","severity":1,"message":"75","line":36,"column":17,"nodeType":"68","messageId":"69","endLine":36,"endColumn":26},{"ruleId":"66","severity":1,"message":"77","line":51,"column":8,"nodeType":"68","messageId":"69","endLine":51,"endColumn":20},{"ruleId":"66","severity":1,"message":"78","line":3,"column":10,"nodeType":"68","messageId":"69","endLine":3,"endColumn":13},{"ruleId":"66","severity":1,"message":"79","line":8,"column":7,"nodeType":"68","messageId":"69","endLine":8,"endColumn":23},{"ruleId":"66","severity":1,"message":"77","line":37,"column":8,"nodeType":"68","messageId":"69","endLine":37,"endColumn":20},{"ruleId":"66","severity":1,"message":"80","line":37,"column":22,"nodeType":"68","messageId":"69","endLine":37,"endColumn":37},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'timestamp' is assigned a value but never used.","'username' is assigned a value but never used.","'chatRoomData' is assigned a value but never used.","'Row' is defined but never used.","'autoScrollOffset' is assigned a value but never used.","'currentUsername' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]